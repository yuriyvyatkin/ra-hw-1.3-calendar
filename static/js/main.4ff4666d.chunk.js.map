{"version":3,"sources":["components/TableRow.js","components/TableBody.js","getDays.js","components/Calendar.js","getDateObject.js","App.js","reportWebVitals.js","index.js"],"names":["TableRow","week","currentDay","firstWeek","lastWeek","days","map","day","className","toString","TableBody","date","getDate","copiedDate","Date","getTime","firstDay","getFullYear","getMonth","getDay","lastDate","weeksNumber","Math","ceil","currentMonthDay","nextMonthDay","setDate","i","subArray","j","length","unshift","push","getDays","lastChildIndex","index","join","Calendar","dateObj","capitalize","s","charAt","toUpperCase","slice","splittedDate","Intl","DateTimeFormat","weekday","month","year","format","split","weekDay","capitalizedWeekDay","capitalizedMonth","uppercasedMonth","getDateObject","scope","title","now","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ff4666d.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst propTypes = {\n  week: PropTypes.array.isRequired,\n  currentDay: PropTypes.number.isRequired,\n  firstWeek: PropTypes.bool.isRequired,\n  lastWeek: PropTypes.bool.isRequired,\n}\n\nfunction TableRow({ week, currentDay, firstWeek, lastWeek }) {\n  const days = week.map((day) => {\n    let className;\n\n    if (day === currentDay) {\n      className = 'ui-datepicker-today';\n    }\n\n    if (firstWeek && day > week[6]) {\n      className = 'ui-datepicker-other-month';\n    }\n\n    if (lastWeek && day < week[0]) {\n      className = 'ui-datepicker-other-month';\n    }\n\n    return <td className={className} key={day.toString()}>{day}</td>;\n  });\n\n  return <tr>{days}</tr>;\n}\n\nTableRow.propTypes = propTypes;\n\nexport default TableRow;\n","import getDays from '../getDays';\nimport TableRow from './TableRow';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  date: PropTypes.instanceOf(Date).isRequired,\n}\n\nfunction TableBody({ date }) {\n  const currentDay = date.getDate();\n\n  const days = getDays(date);\n  const lastChildIndex = days.length - 1;\n\n  return (\n    <tbody>\n      {days.map((week, index) => {\n        return (\n          <TableRow\n            week={week}\n            currentDay={currentDay}\n            key={week.join('')}\n            firstWeek={index === 0}\n            lastWeek={index === lastChildIndex}\n          />\n        );\n      })}\n    </tbody>\n  );\n}\n\nTableBody.propTypes = propTypes;\n\nexport default TableBody;\n","export default function getDays(date) {\n  const copiedDate = new Date(date.getTime());\n\n  let firstDay = new Date(\n    copiedDate.getFullYear(),\n    copiedDate.getMonth(),\n  ).getDay();\n\n  firstDay = (firstDay === 0 ? 7 : firstDay) - 1;\n\n  const lastDate = new Date(\n    copiedDate.getFullYear(),\n    copiedDate.getMonth() + 1,\n    0\n  ).getDate();\n\n  const weeksNumber = Math.ceil(lastDate / 7);\n  const daysNumber = 7;\n\n  const days = [];\n\n  let currentMonthDay = 1;\n  let nextMonthDay = 1;\n\n  copiedDate.setDate(0);\n\n  for (let i = 0; i < weeksNumber; i += 1) {\n    const subArray = [];\n    for (let j = 0; j < daysNumber; j += 1) {\n      if (days.length === 0 && j < firstDay) {\n        copiedDate.setDate(copiedDate.getDate() - (j ? 1 : 0));\n        subArray.unshift(copiedDate.getDate());\n        continue;\n      } else if (currentMonthDay > lastDate) {\n        subArray.push(nextMonthDay);\n        nextMonthDay += 1;\n      } else {\n        subArray.push(currentMonthDay);\n        currentMonthDay += 1;\n      }\n    }\n    days.push(subArray);\n  }\n\n  return days;\n}\n","import getDateObject from '../getDateObject';\nimport TableBody from './TableBody';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  date: PropTypes.instanceOf(Date).isRequired,\n}\n\nfunction Calendar({ date }) {\n  const dateObj = getDateObject(date);\n\n  return (\n    <div className=\"ui-datepicker\">\n      <div className=\"ui-datepicker-material-header\">\n        <div className=\"ui-datepicker-material-day\">\n          {dateObj.capitalizedWeekDay}\n        </div>\n        <div className=\"ui-datepicker-material-date\">\n          <div className=\"ui-datepicker-material-day-num\">\n            {dateObj.day}\n          </div>\n          <div className=\"ui-datepicker-material-month\">\n            {dateObj.uppercasedMonth}\n          </div>\n          <div className=\"ui-datepicker-material-year\">\n            {dateObj.year}\n          </div>\n        </div>\n      </div>\n      <div className=\"ui-datepicker-header\">\n        <div className=\"ui-datepicker-title\">\n          <span className=\"ui-datepicker-month\">\n            {dateObj.capitalizedMonth}\n          </span>\n          &nbsp;\n          <span className=\"ui-datepicker-year\">\n            {dateObj.year}\n          </span>\n        </div>\n      </div>\n      <table className=\"ui-datepicker-calendar\">\n        <colgroup>\n          <col />\n          <col />\n          <col />\n          <col />\n          <col />\n          <col className=\"ui-datepicker-week-end\" />\n          <col className=\"ui-datepicker-week-end\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th scope=\"col\" title=\"Понедельник\">Пн</th>\n            <th scope=\"col\" title=\"Вторник\">Вт</th>\n            <th scope=\"col\" title=\"Среда\">Ср</th>\n            <th scope=\"col\" title=\"Четверг\">Чт</th>\n            <th scope=\"col\" title=\"Пятница\">Пт</th>\n            <th scope=\"col\" title=\"Суббота\">Сб</th>\n            <th scope=\"col\" title=\"Воскресенье\">Вс</th>\n          </tr>\n        </thead>\n        <TableBody date={date} />\n      </table>\n    </div>\n  );\n}\n\nCalendar.propTypes = propTypes;\n\nexport default Calendar;\n","export default function getDateObject(date) {\n  const capitalize = (s) => {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  const options = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric'};\n  const fullDate = new Intl.DateTimeFormat('ru-RU', options).format(date);\n  const splittedDate = fullDate.split(/[,\\sг.]+/g);\n\n  const [weekDay, day, month, year] = splittedDate;\n\n  const capitalizedWeekDay = capitalize(weekDay);\n\n  const capitalizedMonth = capitalize(\n    new Intl.DateTimeFormat('ru-RU', { month: 'long' }).format(date)\n  );\n\n  return {\n    capitalizedWeekDay,\n    day,\n    uppercasedMonth: month.toUpperCase(),\n    year,\n    capitalizedMonth,\n  }\n}\n","import './App.css';\nimport Calendar from './components/Calendar'\n\nconst now = new Date(2021, 11, 24);\n\nfunction App() {\n  return (\n    <Calendar date={now} />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}